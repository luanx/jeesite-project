#J2Cache configuration
#########################################
# Cache Broadcast Method
# values:
# redis -> use redis publish/subscribe mechanism (using jedis)
# lettuce -> use redis publish/subscribe mechanism (using lettuce)
# jgroups -> use jgroups's multicast
# rabbitmq -> use RabbitMQ publisher/consumer mechanism
# rocketmq -> use RocketMQ publisher/consumer mechanism
# none -> don't notify the other nodes in cluster
# xx.xxxx.xxxx.Xxxxx your own cache broadcast policy classname that implement net.oschina.j2cache.cluster.ClusterPolicy
#########################################
#j2cache.broadcast = redis
j2cache.broadcast=com.jeesite.common.j2cache.cache.support.redis.SpringRedisPubSubPolicy
#########################################
# Cache Clean Mode
# active -> \u4E3B\u52A8\u6E05\u9664\uFF0C\u4E8C\u7EA7\u7F13\u5B58\u8FC7\u671F\u4E3B\u52A8\u901A\u77E5\u5404\u8282\u70B9\u6E05\u9664\uFF0C\u4F18\u70B9\u5728\u4E8E\u6240\u6709\u8282\u70B9\u53EF\u4EE5\u540C\u65F6\u6536\u5230\u7F13\u5B58\u6E05\u9664
# passive -> \u88AB\u52A8\u6E05\u9664\uFF0C\u4E00\u7EA7\u7F13\u5B58\u8FC7\u671F\u8FDB\u884C\u901A\u77E5\u5404\u8282\u70B9\u6E05\u9664\u4E00\u4E8C\u7EA7\u7F13\u5B58
# blend -> \u4E24\u79CD\u6A21\u5F0F\u4E00\u8D77\u8FD0\u4F5C\uFF0C\u5BF9\u4E8E\u5404\u4E2A\u8282\u70B9\u7F13\u5B58\u51C6\u786E\u4EE5\u53CA\u53CA\u65F6\u6027\u8981\u6C42\u9AD8\u7684\u53EF\u4EE5\u4F7F\u7528\uFF0C\u6B63\u5E38\u7528\u524D\u4E24\u79CD\u6A21\u5F0F\u4E2D\u4E00\u4E2A\u5C31\u53EF
#########################################
j2cache.broadcast.cache_clean_mode=passive
#########################################
# Level 1&2 provider
# values:
# none -> disable this level cache
# ehcache -> use ehcache2 as level 1 cache
# ehcache3 -> use ehcache3 as level 1 cache
# caffeine -> use caffeine as level 1 cache(only in memory)
# redis -> use redis as level 2 cache (using jedis)
# lettuce -> use redis as level 2 cache (using lettuce)
# readonly-redis -> use redis as level 2 cache ,but never write data to it. if use this provider, you must uncomment `j2cache.L2.config_section` to make the redis configurations available.
# memcached -> use memcached as level 2 cache (xmemcached),
# [classname] -> use custom provider
#########################################
j2cache.L1.provider_class=caffeine
#j2cache.L2.provider_class = redis
j2cache.L2.provider_class=com.jeesite.common.j2cache.cache.support.redis.SpringRedisProvider
# When L2 provider isn't `redis`, using `L2.config_section = redis` to read redis configurations
j2cache.L2.config_section=redis
# Enable/Disable ttl in redis cache data (if disabled, the object in redis will never expire, default:true)
# NOTICE: redis hash mode (redis.storage = hash) do not support this feature)
j2cache.sync_ttl_to_redis=true
# Whether to cache null objects by default (default false)
j2cache.default_cache_null_object=true
#########################################
# Cache Serialization Provider
# values:
# fst -> using fast-serialization (recommend)
# kyro -> using kyro serialization
# json -> using fst's json serialization (testing)
# fastjson -> using fastjson serialization (embed non-static class not support)
# java -> java standard
# [classname implements Serializer]
#########################################
j2cache.serialization=fst
#########################################
# Caffeine configuration
# caffeine.region.[name] = size, xxxx[s|m|h|d]
#########################################
#caffeine.properties = /config/caffeine.properties
caffeine.region.default=10000, 1h
caffeine.region.sessionCache=100000, 30m
#########################################
# Redis connection configuration
#########################################
#redis storage mode (generic|hash)
redis.storage=hash
## redis pub/sub channel name
redis.channel=j2cache
## redis pub/sub server (using redis.hosts when empty)
redis.channel.host=
## redis cache namespace optional, default[j2cache]
redis.namespace=jeesite

